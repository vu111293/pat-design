ImprovedTarjan()
{
	callStack = Empty
	currentStack = Empty
	goalStack = Empty
	number = 0
	callStack.Push(initialState)
	while (callStack.Count > 0)
	{
		v = callStack.Peek()
		if (v.Number = NOT_VISITED)
		{
			v.Number = number
			number = number + 1
			currentStack.Push(v)
			if (v is accepting)
			{
				goalStack.Push(v)
			}
			for (all w in successors(v))
			{
				if (w in currentStack)
				{
					v.Lowlink = Min(v.Lowlink, w.Number)
					if (goalStack.Count > 0 & v.Lowlink <= goalStack.Peek().Number)
					{
						report counterexample
						return
					}
				}
			}
		}
		unvisitedSuccessors = Empty
		for (all w in successors(v))
		{
			if (w.Number = NOT_VISITED)
			{
				unvisitedSuccessors.Add(w)
			}
		}
		if (unvisitedSuccessors != Empty)
		{
			w = random(unvisitedSuccessors)
			callStack.Push(w)
		}
		else
		{
			if (v is deadlock & v is accepting)
			{
				report counterexample
				return
			}
			if (v.Number = v.Lowlink)
			{
				do
				{
					tmp = currentStack.Pop()
					tmp.Number = SCC_FOUND
				}while(v != temp)
				callStack.Pop()
			}
			else
			{
				pop = callStack.Pop()
				top = callStack.Peek()
				top.Lowlink = Min(top.Lowlink, pop.Lowlink)
			}
		}
	}
}
