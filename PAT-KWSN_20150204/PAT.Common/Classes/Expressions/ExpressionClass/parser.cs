//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Oct 29 14:23:35 CST 2003
//----------------------------------------------------
using System;
//UPGRADE_TODO: The package 'java_cup.runtime' could not be found. If it was not included in the conversion, there may be compiler issues. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1262'"
using java_cup.runtime;
namespace cs3212.oPL
{
	
	/// <summary>CUP v0.10j generated parser.</summary>
	/// <version>  Wed Oct 29 14:23:35 CST 2003
	/// </version>
	public class parser:java_cup.runtime.lr_parser
	{
		
		/// <summary>Default constructor. </summary>
		public parser():base()
		{
		}
		
		/// <summary>Constructor which sets the default scanner. </summary>
		public parser(java_cup.runtime.Scanner s):base(s)
		{
		}
		
		/// <summary>Production table. </summary>
		//UPGRADE_NOTE: Final was removed from the declaration of '_production_table '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		protected internal static readonly short[][] _production_table = unpackFromStrings(new System.String[]{"\x0000\x0033\x0000\x0002\x0003\x0003\x0000\x0002\x0002\x0004\x0000\x0002\x0003" + "\x0003\x0000\x0002\x0003\x0003\x0000\x0002\x0003\x0003\x0000\x0002\x0003\x0003" + "\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0005\x0000" + "\x0002\x0003\x0005\x0000\x0002\x0003\x0004\x0000\x0002\x0003\x0005\x0000\x0002" + "\x0003\x0005\x0000\x0002\x0003\x0004\x0000\x0002\x0003\x0005\x0000\x0002\x0003" + "\x0005\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0005" + "\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0004\x0000\x0002\x0003\x0005\x0000" + "\x0002\x0003\x0008\x0000\x0002\x0003\x0006\x0000\x0002\x0003\x0006\x0000\x0002" + "\x0003\x0007\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0006\x0000\x0002\x0003" + "\x0005\x0000\x0002\x0003\x0006\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0008" + "\x0000\x0002\x0003\x0005\x0000\x0002\x0003\x0007\x0000\x0002\x000D\x0004\x0000" + "\x0002\x000D\x0002\x0000\x0002\x000E\x0009\x0000\x0002\x0008\x0007\x0000\x0002" + "\x0008\x0002\x0000\x0002\x0009\x0006\x0000\x0002\x0009\x0002\x0000\x0002\x0006" + "\x0004\x0000\x0002\x0007\x0004\x0000\x0002\x0007\x0002\x0000\x0002\x0004\x0004" + "\x0000\x0002\x0005\x0004\x0000\x0002\x0005\x0002\x0000\x0002\x000A\x0005\x0000" + "\x0002\x000B\x0004\x0000\x0002\x000C\x0004\x0000\x0002\x000C\x0002"});
		
		/// <summary>Access to production table. </summary>
		public virtual short[][] production_table()
		{
			return _production_table;
		}
		
		/// <summary>Parse-action table. </summary>
		//UPGRADE_NOTE: Final was removed from the declaration of '_action_table '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		protected internal static readonly short[][] _action_table = unpackFromStrings(new System.String[]{"\x0000\x0075\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008" + "\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A" + "\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000" + "\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014" + "\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E" + "\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002\ufffe" + "\x0004\ufffe\x0005\ufffe\x0006\ufffe\x0007\ufffe\x0008\ufffe\x0009\ufffe\x000A" + "\ufffe\x000C\ufffe\x000D\ufffe\x000E\ufffe\x000F\ufffe\x0010\ufffe\x0011\ufffe" + "\x0012\ufffe\x0013\ufffe\x0014\ufffe\x0015\ufffe\x0016\ufffe\x0017\ufffe\x0018" + "\ufffe\x0019\ufffe\x001A\ufffe\x001B\ufffe\x001C\ufffe\x001D\ufffe\x001E\ufffe" + "\x001F\ufffe\x0020\ufffe\x0022\ufffe\x0023\ufffe\x0024\ufffe\x0025\ufffe\x0026" + "\ufffe\x0027\ufffe\x0028\ufffe\x0029\ufffe\x002A\ufffe\x002B\ufffe\x002C\ufffe" + "\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008" + "\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A" + "\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000" + "\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014" + "\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E" + "\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0004\x0004\x0016" + "\x0001\x0002\x0000\x0052\x0002\ufffd\x0004\ufffd\x0005\ufffd\x0006\ufffd\x0007" + "\ufffd\x0008\ufffd\x0009\ufffd\x000A\ufffd\x000C\ufffd\x000D\ufffd\x000E\ufffd" + "\x000F\ufffd\x0010\ufffd\x0011\ufffd\x0012\ufffd\x0013\ufffd\x0014\ufffd\x0015" + "\ufffd\x0016\ufffd\x0017\ufffd\x0018\ufffd\x0019\ufffd\x001A\ufffd\x001B\ufffd" + "\x001C\ufffd\x001D\ufffd\x001E\ufffd\x001F\ufffd\x0020\ufffd\x0022\ufffd\x0023" + 
			"\ufffd\x0024\ufffd\x0025\ufffd\x0026\ufffd\x0027\ufffd\x0028\ufffd\x0029\ufffd" + "\x002A\ufffd\x002B\ufffd\x002C\ufffd\x0001\x0002\x0000\x0022\x0004\x000D\x0005" + "\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011" + "\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026" + "\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002\ufffc\x0004\ufffc\x0005\ufffc" + "\x0006\ufffc\x0007\ufffc\x0008\ufffc\x0009\ufffc\x000A\ufffc\x000C\ufffc\x000D" + "\ufffc\x000E\ufffc\x000F\ufffc\x0010\ufffc\x0011\ufffc\x0012\ufffc\x0013\ufffc" + "\x0014\ufffc\x0015\ufffc\x0016\ufffc\x0017\ufffc\x0018\ufffc\x0019\ufffc\x001A" + "\ufffc\x001B\ufffc\x001C\ufffc\x001D\ufffc\x001E\ufffc\x001F\ufffc\x0020\ufffc" + "\x0022\ufffc\x0023\ufffc\x0024\ufffc\x0025\ufffc\x0026\ufffc\x0027\ufffc\x0028" + "\ufffc\x0029\ufffc\x002A\ufffc\x002B\ufffc\x002C\ufffc\x0001\x0002\x0000\x0020" + "\x0002\x006A\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013" + "\x0026\x0014\x0020\x0016\x001B\x0017\x0027\x0020\x001C\x0023\x0021\x0025\x0025" + "\x0028\x0024\x0029\x0023\x0001\x0002\x0000\x0052\x0002\x0001\x0004\x0001\x0005" + "\x0001\x0006\x0001\x0007\x0001\x0008\x0001\x0009\x0001\x000A\x0001\x000C\x0001" + "\x000D\x0001\x000E\x0001\x000F\x0001\x0010\x0001\x0011\x0001\x0012\x0001\x0013" + "\x0001\x0014\x0001\x0015\x0001\x0016\x0001\x0017\x0001\x0018\x0001\x0019\x0001" + "\x001A\x0001\x001B\x0001\x001C\x0001\x001D\x0001\x001E\x0001\x001F\x0001\x0020" + "\x0001\x0022\x0001\x0023\x0001\x0024\x0001\x0025\x0001\x0026\x0001\x0027\x0001" + "\x0028\x0001\x0029\x0001\x002A\x0001\x002B\x0001\x002C\x0001\x0001\x0002\x0000" + "\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014" + "\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E" + "\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0004\x0004\x005F" + "\x0001\x0002\x0000\x0006\x0005\x0054\x001F\uffd9\x0001\x0002\x0000\x0022\x0004" + 
			"\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008" + "\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024" + "\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002\uffff\x0004\uffff" + "\x0005\uffff\x0006\uffff\x0007\uffff\x0008\uffff\x0009\uffff\x000A\uffff\x000C" + "\uffff\x000D\uffff\x000E\uffff\x000F\uffff\x0010\uffff\x0011\uffff\x0012\uffff" + "\x0013\uffff\x0014\uffff\x0015\uffff\x0016\uffff\x0017\uffff\x0018\uffff\x0019" + "\uffff\x001A\uffff\x001B\uffff\x001C\uffff\x001D\uffff\x001E\uffff\x001F\uffff" + "\x0020\uffff\x0022\uffff\x0023\uffff\x0024\uffff\x0025\uffff\x0026\uffff\x0027" + "\uffff\x0028\uffff\x0029\uffff\x002A\uffff\x002B\uffff\x002C\uffff\x0001\x0002" + "\x0000\x0008\x002B\x0041\x002C\uffde\x002D\x003F\x0001\x0002\x0000\x0004\x0004" + "\x0015\x0001\x0002\x0000\x0004\x0004\x0016\x0001\x0002\x0000\x0006\x0004\x003C" + "\x000B\uffd6\x0001\x0002\x0000\x0004\x000B\x0018\x0001\x0002\x0000\x0022\x0004" + "\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008" + "\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024" + "\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002\uffe8\x0004\uffe8" + "\x0005\uffe8\x0006\uffe8\x0007\uffe8\x0008\uffe8\x0009\uffe8\x000A\uffe8\x000C" + "\uffe8\x000D\uffe8\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A" + "\x0013\x0026\x0014\x0020\x0015\uffe8\x0016\x001B\x0017\x0027\x0018\uffe8\x0019" + "\uffe8\x001A\uffe8\x001B\uffe8\x001C\uffe8\x001D\uffe8\x001E\uffe8\x001F\uffe8" + "\x0020\x001C\x0022\uffe8\x0023\x0021\x0024\uffe8\x0025\x0025\x0026\uffe8\x0027" + "\uffe8\x0028\uffe8\x0029\x0023\x002A\uffe8\x002B\uffe8\x002C\uffe8\x0001\x0002" + "\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009" + "\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F" + "\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0022\x0004" + 
			"\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008" + "\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024" + "\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012" + "\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015" + "\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004" + "\x002A\x0013\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007" + "\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E" + "\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001" + "\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B" + "\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C" + "\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0022" + "\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A" + "\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010" + "\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0022\x0004\x000D\x0005" + "\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011" + "\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026" + "\x0004\x002A\x0013\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x002F\x0006\x0005" + "\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018" + "\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013" + "\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008" + "\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A" + "\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000" + "\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014" + "\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E" + 
			"\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0022\x0004\x000D" + "\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C" + "\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007" + "\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006" + "\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006" + "\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A" + "\x0013\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009" + "\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019" + "\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002" + "\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009" + "\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F" + "\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002" + "\ufff5\x0004\ufff5\x0005\ufff5\x0006\ufff5\x0007\ufff5\x0008\ufff5\x0009\ufff5" + "\x000A\ufff5\x000C\ufff5\x000D\ufff5\x000E\x001E\x000F\x0022\x0010\x001D\x0011" + "\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\ufff5\x0016\x001B\x0017\ufff5" + "\x0018\ufff5\x0019\ufff5\x001A\ufff5\x001B\ufff5\x001C\ufff5\x001D\ufff5\x001E" + "\ufff5\x001F\ufff5\x0020\ufff5\x0022\ufff5\x0023\x0021\x0024\ufff5\x0025\x0025" + "\x0026\ufff5\x0027\ufff5\x0028\ufff5\x0029\ufff5\x002A\ufff5\x002B\ufff5\x002C" + "\ufff5\x0001\x0002\x0000\x0052\x0002\ufff9\x0004\ufff9\x0005\ufff9\x0006\ufff9" + "\x0007\ufff9\x0008\ufff9\x0009\ufff9\x000A\ufff9\x000C\ufff9\x000D\ufff9\x000E" + "\ufff9\x000F\ufff9\x0010\ufff9\x0011\ufff9\x0012\ufff9\x0013\ufff9\x0014\ufff9" + "\x0015\ufff9\x0016\ufff9\x0017\ufff9\x0018\ufff9\x0019\ufff9\x001A\ufff9\x001B" + "\ufff9\x001C\ufff9\x001D\ufff9\x001E\ufff9\x001F\ufff9\x0020\ufff9\x0022\ufff9" + "\x0023\x0021\x0024\ufff9\x0025\ufff9\x0026\ufff9\x0027\ufff9\x0028\ufff9\x0029" + 
			"\ufff9\x002A\ufff9\x002B\ufff9\x002C\ufff9\x0001\x0002\x0000\x0050\x0002\uffec" + "\x0004\uffec\x0005\uffec\x0006\uffec\x0007\uffec\x0008\uffec\x0009\uffec\x000A" + "\uffec\x000C\uffec\x000D\uffec\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F" + "\x0012\x001A\x0013\x0026\x0014\x0020\x0015\uffec\x0016\uffec\x0017\uffec\x0018" + "\uffec\x0019\uffec\x001A\uffec\x001B\uffec\x001C\uffec\x001D\uffec\x001E\uffec" + "\x001F\uffec\x0020\uffec\x0022\uffec\x0023\x0021\x0024\uffec\x0026\uffec\x0027" + "\uffec\x0028\uffec\x0029\uffec\x002A\uffec\x002B\uffec\x002C\uffec\x0001\x0002" + "\x0000\x0052\x0002\uffe5\x0004\uffe5\x0005\uffe5\x0006\uffe5\x0007\uffe5\x0008" + "\uffe5\x0009\uffe5\x000A\uffe5\x000C\uffe5\x000D\uffe5\x000E\x001E\x000F\x0022" + "\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\uffe5\x0016" + "\x001B\x0017\x0027\x0018\uffe5\x0019\uffe5\x001A\uffe5\x001B\uffe5\x001C\uffe5" + "\x001D\uffe5\x001E\uffe5\x001F\uffe5\x0020\x001C\x0022\uffe5\x0023\x0021\x0024" + "\uffe5\x0025\x0025\x0026\uffe5\x0027\uffe5\x0028\uffe5\x0029\x0023\x002A\uffe5" + "\x002B\uffe5\x002C\uffe5\x0001\x0002\x0000\x0052\x0002\uffe3\x0004\uffe3\x0005" + "\uffe3\x0006\uffe3\x0007\uffe3\x0008\uffe3\x0009\uffe3\x000A\uffe3\x000C\uffe3" + "\x000D\uffe3\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013" + "\x0026\x0014\x0020\x0015\uffe3\x0016\x001B\x0017\x0027\x0018\uffe3\x0019\uffe3" + "\x001A\uffe3\x001B\uffe3\x001C\uffe3\x001D\uffe3\x001E\uffe3\x001F\uffe3\x0020" + "\x001C\x0022\uffe3\x0023\x0021\x0024\uffe3\x0025\x0025\x0026\uffe3\x0027\uffe3" + "\x0028\uffe3\x0029\x0023\x002A\uffe3\x002B\uffe3\x002C\uffe3\x0001\x0002\x0000" + "\x004C\x0002\ufff2\x0004\ufff2\x0005\ufff2\x0006\ufff2\x0007\ufff2\x0008\ufff2" + "\x0009\ufff2\x000A\ufff2\x000C\ufff2\x000D\ufff2\x0011\x001F\x0012\x001A\x0013" + "\x0026\x0014\x0020\x0015\ufff2\x0016\ufff2\x0017\ufff2\x0018\ufff2\x0019\ufff2" + "\x001A\ufff2\x001B\ufff2\x001C\ufff2\x001D\ufff2\x001E\ufff2\x001F\ufff2\x0020" + 
			"\ufff2\x0022\ufff2\x0023\x0021\x0024\ufff2\x0025\ufff2\x0026\ufff2\x0027\ufff2" + "\x0028\ufff2\x0029\ufff2\x002A\ufff2\x002B\ufff2\x002C\ufff2\x0001\x0002\x0000" + "\x0052\x0002\uffee\x0004\uffee\x0005\uffee\x0006\uffee\x0007\uffee\x0008\uffee" + "\x0009\uffee\x000A\uffee\x000C\uffee\x000D\uffee\x000E\uffee\x000F\uffee\x0010" + "\uffee\x0011\uffee\x0012\uffee\x0013\uffee\x0014\uffee\x0015\uffee\x0016\uffee" + "\x0017\uffee\x0018\uffee\x0019\uffee\x001A\uffee\x001B\uffee\x001C\uffee\x001D" + "\uffee\x001E\uffee\x001F\uffee\x0020\uffee\x0022\uffee\x0023\uffee\x0024\uffee" + "\x0025\uffee\x0026\uffee\x0027\uffee\x0028\uffee\x0029\uffee\x002A\uffee\x002B" + "\uffee\x002C\uffee\x0001\x0002\x0000\x0052\x0002\uffff\x0004\uffff\x0005\uffff" + "\x0006\uffff\x0007\uffff\x0008\uffff\x0009\uffff\x000A\uffff\x000C\x0030\x000D" + "\uffff\x000E\uffff\x000F\uffff\x0010\uffff\x0011\uffff\x0012\uffff\x0013\uffff" + "\x0014\uffff\x0015\uffff\x0016\uffff\x0017\uffff\x0018\uffff\x0019\uffff\x001A" + "\uffff\x001B\uffff\x001C\uffff\x001D\uffff\x001E\uffff\x001F\uffff\x0020\uffff" + "\x0022\uffff\x0023\uffff\x0024\uffff\x0025\uffff\x0026\uffff\x0027\uffff\x0028" + "\uffff\x0029\uffff\x002A\uffff\x002B\uffff\x002C\uffff\x0001\x0002\x0000\x0024" + "\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A" + "\x0008\x000C\x0011\x000D\uffd3\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F" + "\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0004\x000D" + "\x0034\x0001\x0002\x0000\x0040\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009" + "\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x000D\uffd3\x000E\x001E\x000F" + "\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\x0006" + "\x0016\x001B\x0017\x0027\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0020" + "\x001C\x0023\x0021\x0024\x0007\x0025\x0025\x0026\x0004\x0028\x0024\x0029\x0023" + "\x002A\x0013\x0001\x0002\x0000\x0004\x000D\uffd4\x0001\x0002\x0000\x0052\x0002" + 
			"\uffe2\x0004\uffe2\x0005\uffe2\x0006\uffe2\x0007\uffe2\x0008\uffe2\x0009\uffe2" + "\x000A\uffe2\x000C\uffe2\x000D\uffe2\x000E\uffe2\x000F\uffe2\x0010\uffe2\x0011" + "\uffe2\x0012\uffe2\x0013\uffe2\x0014\uffe2\x0015\uffe2\x0016\uffe2\x0017\uffe2" + "\x0018\uffe2\x0019\uffe2\x001A\uffe2\x001B\uffe2\x001C\uffe2\x001D\uffe2\x001E" + "\uffe2\x001F\uffe2\x0020\uffe2\x0022\uffe2\x0023\uffe2\x0024\uffe2\x0025\uffe2" + "\x0026\uffe2\x0027\uffe2\x0028\uffe2\x0029\uffe2\x002A\uffe2\x002B\uffe2\x002C" + "\uffe2\x0001\x0002\x0000\x0052\x0002\ufff8\x0004\ufff8\x0005\ufff8\x0006\ufff8" + "\x0007\ufff8\x0008\ufff8\x0009\ufff8\x000A\ufff8\x000C\ufff8\x000D\ufff8\x000E" + "\ufff8\x000F\ufff8\x0010\ufff8\x0011\ufff8\x0012\ufff8\x0013\ufff8\x0014\ufff8" + "\x0015\ufff8\x0016\ufff8\x0017\ufff8\x0018\ufff8\x0019\ufff8\x001A\ufff8\x001B" + "\ufff8\x001C\ufff8\x001D\ufff8\x001E\ufff8\x001F\ufff8\x0020\ufff8\x0022\ufff8" + "\x0023\x0021\x0024\ufff8\x0025\ufff8\x0026\ufff8\x0027\ufff8\x0028\ufff8\x0029" + "\ufff8\x002A\ufff8\x002B\ufff8\x002C\ufff8\x0001\x0002\x0000\x0052\x0002\ufffb" + "\x0004\ufffb\x0005\ufffb\x0006\ufffb\x0007\ufffb\x0008\ufffb\x0009\ufffb\x000A" + "\ufffb\x000C\ufffb\x000D\ufffb\x000E\ufffb\x000F\ufffb\x0010\ufffb\x0011\ufffb" + "\x0012\ufffb\x0013\x0026\x0014\x0020\x0015\ufffb\x0016\ufffb\x0017\ufffb\x0018" + "\ufffb\x0019\ufffb\x001A\ufffb\x001B\ufffb\x001C\ufffb\x001D\ufffb\x001E\ufffb" + "\x001F\ufffb\x0020\ufffb\x0022\ufffb\x0023\x0021\x0024\ufffb\x0025\ufffb\x0026" + "\ufffb\x0027\ufffb\x0028\ufffb\x0029\ufffb\x002A\ufffb\x002B\ufffb\x002C\ufffb" + "\x0001\x0002\x0000\x004C\x0002\ufff1\x0004\ufff1\x0005\ufff1\x0006\ufff1\x0007" + "\ufff1\x0008\ufff1\x0009\ufff1\x000A\ufff1\x000C\ufff1\x000D\ufff1\x0011\x001F" + "\x0012\x001A\x0013\x0026\x0014\x0020\x0015\ufff1\x0016\ufff1\x0017\ufff1\x0018" + "\ufff1\x0019\ufff1\x001A\ufff1\x001B\ufff1\x001C\ufff1\x001D\ufff1\x001E\ufff1" + "\x001F\ufff1\x0020\ufff1\x0022\ufff1\x0023\x0021\x0024\ufff1\x0025\ufff1\x0026" + 
			"\ufff1\x0027\ufff1\x0028\ufff1\x0029\ufff1\x002A\ufff1\x002B\ufff1\x002C\ufff1" + "\x0001\x0002\x0000\x004C\x0002\ufff3\x0004\ufff3\x0005\ufff3\x0006\ufff3\x0007" + "\ufff3\x0008\ufff3\x0009\ufff3\x000A\ufff3\x000C\ufff3\x000D\ufff3\x0011\x001F" + "\x0012\x001A\x0013\x0026\x0014\x0020\x0015\ufff3\x0016\ufff3\x0017\ufff3\x0018" + "\ufff3\x0019\ufff3\x001A\ufff3\x001B\ufff3\x001C\ufff3\x001D\ufff3\x001E\ufff3" + "\x001F\ufff3\x0020\ufff3\x0022\ufff3\x0023\x0021\x0024\ufff3\x0025\ufff3\x0026" + "\ufff3\x0027\ufff3\x0028\ufff3\x0029\ufff3\x002A\ufff3\x002B\ufff3\x002C\ufff3" + "\x0001\x0002\x0000\x0052\x0002\uffef\x0004\uffef\x0005\uffef\x0006\uffef\x0007" + "\uffef\x0008\uffef\x0009\uffef\x000A\uffef\x000C\uffef\x000D\uffef\x000E\x001E" + "\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015" + "\uffef\x0016\x001B\x0017\x0027\x0018\uffef\x0019\uffef\x001A\uffef\x001B\uffef" + "\x001C\uffef\x001D\uffef\x001E\uffef\x001F\uffef\x0020\x001C\x0022\uffef\x0023" + "\x0021\x0024\uffef\x0025\x0025\x0026\uffef\x0027\uffef\x0028\uffef\x0029\uffef" + "\x002A\uffef\x002B\uffef\x002C\uffef\x0001\x0002\x0000\x0052\x0002\ufff6\x0004" + "\ufff6\x0005\ufff6\x0006\ufff6\x0007\ufff6\x0008\ufff6\x0009\ufff6\x000A\ufff6" + "\x000C\ufff6\x000D\ufff6\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012" + "\x001A\x0013\x0026\x0014\x0020\x0015\ufff6\x0016\ufff6\x0017\ufff6\x0018\ufff6" + "\x0019\ufff6\x001A\ufff6\x001B\ufff6\x001C\ufff6\x001D\ufff6\x001E\ufff6\x001F" + "\ufff6\x0020\ufff6\x0022\ufff6\x0023\x0021\x0024\ufff6\x0025\x0025\x0026\ufff6" + "\x0027\ufff6\x0028\ufff6\x0029\ufff6\x002A\ufff6\x002B\ufff6\x002C\ufff6\x0001" + "\x0002\x0000\x0052\x0002\ufffa\x0004\ufffa\x0005\ufffa\x0006\ufffa\x0007\ufffa" + "\x0008\ufffa\x0009\ufffa\x000A\ufffa\x000C\ufffa\x000D\ufffa\x000E\ufffa\x000F" + "\ufffa\x0010\ufffa\x0011\ufffa\x0012\ufffa\x0013\x0026\x0014\x0020\x0015\ufffa" + "\x0016\ufffa\x0017\ufffa\x0018\ufffa\x0019\ufffa\x001A\ufffa\x001B\ufffa\x001C" + 
			"\ufffa\x001D\ufffa\x001E\ufffa\x001F\ufffa\x0020\ufffa\x0022\ufffa\x0023\x0021" + "\x0024\ufffa\x0025\ufffa\x0026\ufffa\x0027\ufffa\x0028\ufffa\x0029\ufffa\x002A" + "\ufffa\x002B\ufffa\x002C\ufffa\x0001\x0002\x0000\x0008\x0004\x003C\x000B\uffd6" + "\x000D\uffd6\x0001\x0002\x0000\x0004\x000B\uffd8\x0001\x0002\x0000\x0006\x000B" + "\uffd7\x000D\uffd7\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005" + "\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018" + "\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013" + "\x0001\x0002\x0000\x0004\x002C\x004A\x0001\x0002\x0000\x0004\x0005\x0044\x0001" + "\x0002\x0000\x0006\x002B\x0041\x002C\uffde\x0001\x0002\x0000\x0004\x002C\uffdf" + "\x0001\x0002\x0000\x0004\x000C\x0045\x0001\x0002\x0000\x0006\x0004\x003C\x000D" + "\uffd6\x0001\x0002\x0000\x0004\x000D\x0047\x0001\x0002\x0000\x0004\x000B\x0048" + "\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008" + "\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A" + "\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000" + "\x0022\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026" + "\x0014\x0020\x0016\x001B\x0017\x0027\x0020\x001C\x0023\x0021\x0025\x0025\x0028" + "\x0024\x0029\x0023\x002B\uffdd\x002C\uffdd\x0001\x0002\x0000\x0052\x0002\uffe1" + "\x0004\uffe1\x0005\uffe1\x0006\uffe1\x0007\uffe1\x0008\uffe1\x0009\uffe1\x000A" + "\uffe1\x000C\uffe1\x000D\uffe1\x000E\uffe1\x000F\uffe1\x0010\uffe1\x0011\uffe1" + "\x0012\uffe1\x0013\uffe1\x0014\uffe1\x0015\uffe1\x0016\uffe1\x0017\uffe1\x0018" + "\uffe1\x0019\uffe1\x001A\uffe1\x001B\uffe1\x001C\uffe1\x001D\uffe1\x001E\uffe1" + "\x001F\uffe1\x0020\uffe1\x0022\uffe1\x0023\uffe1\x0024\uffe1\x0025\uffe1\x0026" + "\uffe1\x0027\uffe1\x0028\uffe1\x0029\uffe1\x002A\uffe1\x002B\uffe1\x002C\uffe1" + "\x0001\x0002\x0000\x0022\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012" + 
			"\x001A\x0013\x0026\x0014\x0020\x0016\x001B\x0017\x0027\x0020\x001C\x0023\x0021" + "\x0025\x0025\x0028\x0024\x0029\x0023\x002B\x0041\x002C\uffde\x0001\x0002\x0000" + "\x0004\x002C\x004D\x0001\x0002\x0000\x0052\x0002\uffe0\x0004\uffe0\x0005\uffe0" + "\x0006\uffe0\x0007\uffe0\x0008\uffe0\x0009\uffe0\x000A\uffe0\x000C\uffe0\x000D" + "\uffe0\x000E\uffe0\x000F\uffe0\x0010\uffe0\x0011\uffe0\x0012\uffe0\x0013\uffe0" + "\x0014\uffe0\x0015\uffe0\x0016\uffe0\x0017\uffe0\x0018\uffe0\x0019\uffe0\x001A" + "\uffe0\x001B\uffe0\x001C\uffe0\x001D\uffe0\x001E\uffe0\x001F\uffe0\x0020\uffe0" + "\x0022\uffe0\x0023\uffe0\x0024\uffe0\x0025\uffe0\x0026\uffe0\x0027\uffe0\x0028" + "\uffe0\x0029\uffe0\x002A\uffe0\x002B\uffe0\x002C\uffe0\x0001\x0002\x0000\x0040" + "\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A" + "\x0008\x000C\x0011\x000D\x004F\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F" + "\x0012\x001A\x0013\x0026\x0014\x0020\x0015\x0006\x0016\x001B\x0017\x0027\x0018" + "\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0020\x001C\x0023\x0021\x0024\x0007" + "\x0025\x0025\x0026\x0004\x0028\x0024\x0029\x0023\x002A\x0013\x0001\x0002\x0000" + "\x0052\x0002\uffe7\x0004\uffe7\x0005\uffe7\x0006\uffe7\x0007\uffe7\x0008\uffe7" + "\x0009\uffe7\x000A\uffe7\x000C\uffe7\x000D\uffe7\x000E\uffe7\x000F\uffe7\x0010" + "\uffe7\x0011\uffe7\x0012\uffe7\x0013\uffe7\x0014\uffe7\x0015\uffe7\x0016\uffe7" + "\x0017\uffe7\x0018\uffe7\x0019\uffe7\x001A\uffe7\x001B\uffe7\x001C\uffe7\x001D" + "\uffe7\x001E\uffe7\x001F\uffe7\x0020\uffe7\x0022\uffe7\x0023\uffe7\x0024\uffe7" + "\x0025\uffe7\x0026\uffe7\x0027\uffe7\x0028\uffe7\x0029\uffe7\x002A\uffe7\x002B" + "\uffe7\x002C\uffe7\x0001\x0002\x0000\x0040\x0004\x000D\x0005\x0012\x0006\x0005" + "\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x000D\uffd3\x000E" + "\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020" + "\x0015\x0006\x0016\x001B\x0017\x0027\x0018\x000E\x0019\x000A\x001C\x000F\x001E" + 
			"\x0010\x0020\x001C\x0023\x0021\x0024\x0007\x0025\x0025\x0026\x0004\x0028\x0024" + "\x0029\x0023\x002A\x0013\x0001\x0002\x0000\x0004\x000D\x0052\x0001\x0002\x0000" + "\x0052\x0002\uffe6\x0004\uffe6\x0005\uffe6\x0006\uffe6\x0007\uffe6\x0008\uffe6" + "\x0009\uffe6\x000A\uffe6\x000C\uffe6\x000D\uffe6\x000E\uffe6\x000F\uffe6\x0010" + "\uffe6\x0011\uffe6\x0012\uffe6\x0013\uffe6\x0014\uffe6\x0015\uffe6\x0016\uffe6" + "\x0017\uffe6\x0018\uffe6\x0019\uffe6\x001A\uffe6\x001B\uffe6\x001C\uffe6\x001D" + "\uffe6\x001E\uffe6\x001F\uffe6\x0020\uffe6\x0022\uffe6\x0023\uffe6\x0024\uffe6" + "\x0025\uffe6\x0026\uffe6\x0027\uffe6\x0028\uffe6\x0029\uffe6\x002A\uffe6\x002B" + "\uffe6\x002C\uffe6\x0001\x0002\x0000\x0004\x000D\uffd5\x0001\x0002\x0000\x0004" + "\x0021\x0057\x0001\x0002\x0000\x0004\x001F\x0056\x0001\x0002\x0000\x0052\x0002" + "\ufff0\x0004\ufff0\x0005\ufff0\x0006\ufff0\x0007\ufff0\x0008\ufff0\x0009\ufff0" + "\x000A\ufff0\x000C\ufff0\x000D\ufff0\x000E\ufff0\x000F\ufff0\x0010\ufff0\x0011" + "\ufff0\x0012\ufff0\x0013\ufff0\x0014\ufff0\x0015\ufff0\x0016\ufff0\x0017\ufff0" + "\x0018\ufff0\x0019\ufff0\x001A\ufff0\x001B\ufff0\x001C\ufff0\x001D\ufff0\x001E" + "\ufff0\x001F\ufff0\x0020\ufff0\x0022\ufff0\x0023\ufff0\x0024\ufff0\x0025\ufff0" + "\x0026\ufff0\x0027\ufff0\x0028\ufff0\x0029\ufff0\x002A\ufff0\x002B\ufff0\x002C" + "\ufff0\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009" + "\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019" + "\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002" + "\x0000\x0022\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013" + "\x0026\x0014\x0020\x0016\x001B\x0017\x0027\x001F\uffdb\x0020\x001C\x0022\x0059" + "\x0023\x0021\x0025\x0025\x0028\x0024\x0029\x0023\x0001\x0002\x0000\x0004\x0005" + "\x005B\x0001\x0002\x0000\x0004\x001F\uffda\x0001\x0002\x0000\x0004\x0021\x005C" + "\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008" + 
			"\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A" + "\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000" + "\x0022\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026" + "\x0014\x0020\x0016\x001B\x0017\x0027\x001F\uffdb\x0020\x001C\x0022\x0059\x0023" + "\x0021\x0025\x0025\x0028\x0024\x0029\x0023\x0001\x0002\x0000\x0004\x001F\uffdc" + "\x0001\x0002\x0000\x0004\x000E\x0067\x0001\x0002\x0000\x0004\x001D\x0065\x0001" + "\x0002\x0000\x0006\x0004\x005F\x001D\uffcf\x0001\x0002\x0000\x0004\x001D\uffd1" + "\x0001\x0002\x0000\x0006\x0004\x005F\x001D\uffcf\x0001\x0002\x0000\x0004\x001D" + "\uffd0\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009" + "\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019" + "\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002" + "\x0000\x0052\x0002\uffea\x0004\uffea\x0005\uffea\x0006\uffea\x0007\uffea\x0008" + "\uffea\x0009\uffea\x000A\uffea\x000C\uffea\x000D\uffea\x000E\x001E\x000F\x0022" + "\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\uffea\x0016" + "\x001B\x0017\x0027\x0018\uffea\x0019\uffea\x001A\uffea\x001B\uffea\x001C\uffea" + "\x001D\uffea\x001E\uffea\x001F\uffea\x0020\x001C\x0022\uffea\x0023\x0021\x0024" + "\uffea\x0025\x0025\x0026\uffea\x0027\uffea\x0028\x0024\x0029\x0023\x002A\uffea" + "\x002B\uffea\x002C\uffea\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006" + "\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006" + "\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A" + "\x0013\x0001\x0002\x0000\x0022\x0004\uffd2\x000E\x001E\x000F\x0022\x0010\x001D" + "\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0016\x001B\x0017\x0027\x001D" + "\uffd2\x0020\x001C\x0023\x0021\x0025\x0025\x0028\x0024\x0029\x0023\x0001\x0002" + "\x0000\x0052\x0002\ufff4\x0004\ufff4\x0005\ufff4\x0006\ufff4\x0007\ufff4\x0008" + 
			"\ufff4\x0009\ufff4\x000A\ufff4\x000C\ufff4\x000D\ufff4\x000E\x001E\x000F\x0022" + "\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\ufff4\x0016" + "\ufff4\x0017\ufff4\x0018\ufff4\x0019\ufff4\x001A\ufff4\x001B\ufff4\x001C\ufff4" + "\x001D\ufff4\x001E\ufff4\x001F\ufff4\x0020\ufff4\x0022\ufff4\x0023\x0021\x0024" + "\ufff4\x0025\x0025\x0026\ufff4\x0027\ufff4\x0028\ufff4\x0029\ufff4\x002A\ufff4" + "\x002B\ufff4\x002C\ufff4\x0001\x0002\x0000\x0004\x0002\x0000\x0001\x0002\x0000" + "\x0020\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026" + "\x0014\x0020\x0016\x001B\x0017\x0027\x001A\x006C\x0020\x001C\x0023\x0021\x0025" + "\x0025\x0028\x0024\x0029\x0023\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012" + "\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015" + "\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004" + "\x002A\x0013\x0001\x0002\x0000\x0020\x000E\x001E\x000F\x0022\x0010\x001D\x0011" + "\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0016\x001B\x0017\x0027\x001B\x006E" + "\x0020\x001C\x0023\x0021\x0025\x0025\x0028\x0024\x0029\x0023\x0001\x0002\x0000" + "\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014" + "\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E" + "\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002\uffeb" + "\x0004\uffeb\x0005\uffeb\x0006\uffeb\x0007\uffeb\x0008\uffeb\x0009\uffeb\x000A" + "\uffeb\x000C\uffeb\x000D\uffeb\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F" + "\x0012\x001A\x0013\x0026\x0014\x0020\x0015\uffeb\x0016\x001B\x0017\x0027\x0018" + "\uffeb\x0019\uffeb\x001A\uffeb\x001B\uffeb\x001C\uffeb\x001D\uffeb\x001E\uffeb" + "\x001F\uffeb\x0020\x001C\x0022\uffeb\x0023\x0021\x0024\uffeb\x0025\x0025\x0026" + "\uffeb\x0027\uffeb\x0028\uffeb\x0029\x0023\x002A\uffeb\x002B\uffeb\x002C\uffeb" + "\x0001\x0002\x0000\x0004\x000B\x0071\x0001\x0002\x0000\x0022\x0004\x000D\x0005" + 
			"\x0012\x0006\x0005\x0007\x0009\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011" + "\x0015\x0006\x0018\x000E\x0019\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026" + "\x0004\x002A\x0013\x0001\x0002\x0000\x0052\x0002\uffe9\x0004\uffe9\x0005\uffe9" + "\x0006\uffe9\x0007\uffe9\x0008\uffe9\x0009\uffe9\x000A\uffe9\x000C\uffe9\x000D" + "\uffe9\x000E\x001E\x000F\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026" + "\x0014\x0020\x0015\uffe9\x0016\x001B\x0017\x0027\x0018\uffe9\x0019\uffe9\x001A" + "\uffe9\x001B\uffe9\x001C\uffe9\x001D\uffe9\x001E\uffe9\x001F\uffe9\x0020\x001C" + "\x0022\uffe9\x0023\x0021\x0024\uffe9\x0025\x0025\x0026\uffe9\x0027\uffe9\x0028" + "\uffe9\x0029\x0023\x002A\uffe9\x002B\uffe9\x002C\uffe9\x0001\x0002\x0000\x0050" + "\x0002\uffed\x0004\uffed\x0005\uffed\x0006\uffed\x0007\uffed\x0008\uffed\x0009" + "\uffed\x000A\uffed\x000C\uffed\x000D\uffed\x000E\x001E\x000F\x0022\x0010\x001D" + "\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\uffed\x0016\uffed\x0017" + "\uffed\x0018\uffed\x0019\uffed\x001A\uffed\x001B\uffed\x001C\uffed\x001D\uffed" + "\x001E\uffed\x001F\uffed\x0020\uffed\x0022\uffed\x0023\x0021\x0024\uffed\x0026" + "\uffed\x0027\uffed\x0028\uffed\x0029\uffed\x002A\uffed\x002B\uffed\x002C\uffed" + "\x0001\x0002\x0000\x0052\x0002\ufff7\x0004\ufff7\x0005\ufff7\x0006\ufff7\x0007" + "\ufff7\x0008\ufff7\x0009\ufff7\x000A\ufff7\x000C\ufff7\x000D\ufff7\x000E\ufff7" + "\x000F\ufff7\x0010\ufff7\x0011\ufff7\x0012\ufff7\x0013\ufff7\x0014\ufff7\x0015" + "\ufff7\x0016\ufff7\x0017\ufff7\x0018\ufff7\x0019\ufff7\x001A\ufff7\x001B\ufff7" + "\x001C\ufff7\x001D\ufff7\x001E\ufff7\x001F\ufff7\x0020\ufff7\x0022\ufff7\x0023" + "\x0021\x0024\ufff7\x0025\ufff7\x0026\ufff7\x0027\ufff7\x0028\ufff7\x0029\ufff7" + "\x002A\ufff7\x002B\ufff7\x002C\ufff7\x0001\x0002\x0000\x0020\x000E\x001E\x000F" + "\x0022\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0016\x001B" + "\x0017\x0027\x0020\x001C\x0023\x0021\x0025\x0025\x0027\x0076\x0028\x0024\x0029" + 
			"\x0023\x0001\x0002\x0000\x0022\x0004\x000D\x0005\x0012\x0006\x0005\x0007\x0009" + "\x0008\x000B\x0009\x0014\x000A\x0008\x000C\x0011\x0015\x0006\x0018\x000E\x0019" + "\x000A\x001C\x000F\x001E\x0010\x0024\x0007\x0026\x0004\x002A\x0013\x0001\x0002" + "\x0000\x0052\x0002\uffe4\x0004\uffe4\x0005\uffe4\x0006\uffe4\x0007\uffe4\x0008" + "\uffe4\x0009\uffe4\x000A\uffe4\x000C\uffe4\x000D\uffe4\x000E\x001E\x000F\x0022" + "\x0010\x001D\x0011\x001F\x0012\x001A\x0013\x0026\x0014\x0020\x0015\uffe4\x0016" + "\x001B\x0017\x0027\x0018\uffe4\x0019\uffe4\x001A\uffe4\x001B\uffe4\x001C\uffe4" + "\x001D\uffe4\x001E\uffe4\x001F\uffe4\x0020\x001C\x0022\uffe4\x0023\x0021\x0024" + "\uffe4\x0025\x0025\x0026\uffe4\x0027\uffe4\x0028\uffe4\x0029\x0023\x002A\uffe4" + "\x002B\uffe4\x002C\uffe4\x0001\x0002"});
		
		/// <summary>Access to parse-action table. </summary>
		public virtual short[][] action_table()
		{
			return _action_table;
		}
		
		/// <summary><code>reduce_goto</code> table. </summary>
		//UPGRADE_NOTE: Final was removed from the declaration of '_reduce_table '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		protected internal static readonly short[][] _reduce_table = unpackFromStrings(new System.String[]{"\x0000\x0075\x0000\x0004\x0003\x000B\x0001\x0001\x0000\x0004\x0003\x0074\x0001" + "\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x0073\x0001\x0001\x0000\x0004" + "\x0003\x0072\x0001\x0001\x0000\x0004\x0006\x006F\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0004\x0003\x006A\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x0068\x0001\x0001\x0000" + "\x0006\x000A\x0060\x000B\x005F\x0001\x0001\x0000\x0004\x0009\x0054\x0001\x0001" + "\x0000\x0004\x0003\x004D\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x000D" + "\x003F\x000E\x0041\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0006\x0016" + "\x0001\x0001\x0000\x0004\x0007\x003C\x0001\x0001\x0000\x0002\x0001\x0001\x0000" + "\x0004\x0003\x0018\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x003A" + "\x0001\x0001\x0000\x0004\x0003\x0039\x0001\x0001\x0000\x0004\x0003\x0038\x0001" + "\x0001\x0000\x0004\x0003\x0037\x0001\x0001\x0000\x0004\x0003\x0036\x0001\x0001" + "\x0000\x0004\x0003\x0035\x0001\x0001\x0000\x0004\x0003\x0034\x0001\x0001\x0000" + "\x0004\x0003\x002D\x0001\x0001\x0000\x0004\x0003\x002C\x0001\x0001\x0000\x0004" + "\x0003\x002B\x0001\x0001\x0000\x0004\x0003\x002A\x0001\x0001\x0000\x0004\x0003" + "\x0029\x0001\x0001\x0000\x0004\x0003\x0028\x0001\x0001\x0000\x0004\x0003\x0027" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001" + "\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x0003\x0031\x0005" + "\x0030\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x0003\x0031\x0005\x0032" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001" + "\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000" + 
			"\x0004\x0007\x003D\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001" + "\x0000\x0004\x0003\x004A\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0006\x000D\x0042\x000E\x0041\x0001\x0001\x0000\x0002\x0001\x0001" + "\x0000\x0002\x0001\x0001\x0000\x0004\x0007\x0045\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x0048\x0001\x0001\x0000\x0002" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x000D\x004B\x000E\x0041\x0001" + "\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x0003\x004F" + "\x0004\x0050\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x0003\x0031\x0005" + "\x0052\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0004\x0003\x0057\x0001\x0001\x0000\x0004\x0008\x0059\x0001\x0001" + "\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000" + "\x0004\x0003\x005C\x0001\x0001\x0000\x0004\x0008\x005D\x0001\x0001\x0000\x0002" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x000A" + "\x0062\x000C\x0061\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0006\x000A\x0062" + "\x000C\x0063\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x0065\x0001" + "\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x0067\x0001\x0001\x0000\x0002" + "\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" + "\x0001\x0000\x0004\x0003\x006C\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004" + "\x0003\x006E\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000" + "\x0004\x0003\x0071\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001" + "\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0003\x0076\x0001" + "\x0001\x0000\x0002\x0001\x0001"});
		
		/// <summary>Access to <code>reduce_goto</code> table. </summary>
		public virtual short[][] reduce_table()
		{
			return _reduce_table;
		}
		
		/// <summary>Instance of action encapsulation class. </summary>
		protected internal CUP_parser_actions action_obj;
		
		/// <summary>Action encapsulation object initializer. </summary>
		protected internal virtual void  init_actions()
		{
			action_obj = new CUP_parser_actions(this);
		}
		
		/// <summary>Invoke a user supplied parse action. </summary>
		public virtual java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, System.Collections.ArrayList stack, int top)
		{
			/* call code in generated class */
			return action_obj.CUP_parser_do_action(act_num, parser, stack, top);
		}
		
		/// <summary>Indicates start state. </summary>
		public virtual int start_state()
		{
			return 0;
		}
		/// <summary>Indicates start production. </summary>
		public virtual int start_production()
		{
			return 1;
		}
		
		/// <summary><code>EOF</code> Symbol index. </summary>
		public virtual int EOF_sym()
		{
			return 0;
		}
		
		/// <summary><code>error</code> Symbol index. </summary>
		public virtual int error_sym()
		{
			return 1;
		}
	}
	
	/// <summary>Cup generated class to encapsulate user supplied action code.</summary>
	//UPGRADE_NOTE: The access modifier for this class or class field has been changed in order to prevent compilation errors due to the visibility level. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1296'"
	public class CUP_parser_actions
	{
		
		
		
		
		//UPGRADE_NOTE: Final was removed from the declaration of 'parser '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private parser parser;
		
		/// <summary>Constructor </summary>
		internal CUP_parser_actions(parser parser)
		{
			this.parser = parser;
		}
		
		/// <summary>Method with the actual generated action code. </summary>
		public java_cup.runtime.Symbol CUP_parser_do_action(int CUP_parser_act_num, java_cup.runtime.lr_parser CUP_parser_parser, System.Collections.ArrayList CUP_parser_stack, int CUP_parser_top)
		{
			/* Symbol object for return from actions */
			java_cup.runtime.Symbol CUP_parser_result;
			
			/* select the action based on the action number */
			switch (CUP_parser_act_num)
			{
				
				/*. . . . . . . . . . . . . . . . . . . .*/
				case 50:  // letDefinitionList ::= 
					{
						System.Collections.ArrayList RESULT = null;
						RESULT = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						CUP_parser_result = new java_cup.runtime.Symbol(10, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 49:  // letDefinitionList ::= letDefinition letDefinitionList 
					{
						System.Collections.ArrayList RESULT = null;
						int ldleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int ldright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						LetDefinition ld = (LetDefinition) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int ldsleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int ldsright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList lds = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						lds.Insert(0, ld); RESULT = lds;
						CUP_parser_result = new java_cup.runtime.Symbol(10, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 48:  // notEmptyLetDefinitionList ::= letDefinition letDefinitionList 
					{
						System.Collections.ArrayList RESULT = null;
						int ldleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int ldright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						LetDefinition ld = (LetDefinition) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int ldsleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int ldsright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList lds = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						lds.Insert(0, ld); RESULT = lds;
						CUP_parser_result = new java_cup.runtime.Symbol(9, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 47:  // letDefinition ::= IDENTIFIER EQUAL expression 
					{
						LetDefinition RESULT = null;
						int xleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int xright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						System.String x = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new LetDefinition(x, e);
						CUP_parser_result = new java_cup.runtime.Symbol(8, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 46:  // expressionList ::= 
					{
						System.Collections.ArrayList RESULT = null;
						RESULT = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						CUP_parser_result = new java_cup.runtime.Symbol(3, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 45:  // expressionList ::= expression expressionList 
					{
						System.Collections.ArrayList RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int esleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int esright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList es = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						es.Insert(0, e); RESULT = es;
						CUP_parser_result = new java_cup.runtime.Symbol(3, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 44:  // notEmptyExpressionList ::= expression expressionList 
					{
						System.Collections.ArrayList RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int esleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int esright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList es = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						es.Insert(0, e); RESULT = es;
						CUP_parser_result = new java_cup.runtime.Symbol(2, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 43:  // identifierList ::= 
					{
						System.Collections.ArrayList RESULT = null;
						RESULT = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						CUP_parser_result = new java_cup.runtime.Symbol(5, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 42:  // identifierList ::= IDENTIFIER identifierList 
					{
						System.Collections.ArrayList RESULT = null;
						int ileft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int iright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.String i = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int isleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int isright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList is_Renamed = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						is_Renamed.Insert(0, i); RESULT = is_Renamed;
						CUP_parser_result = new java_cup.runtime.Symbol(5, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 41:  // notEmptyIdentifierList ::= IDENTIFIER identifierList 
					{
						System.Collections.ArrayList RESULT = null;
						int ileft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int iright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.String i = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int isleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int isright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList is_Renamed = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						is_Renamed.Insert(0, i); RESULT = is_Renamed;
						CUP_parser_result = new java_cup.runtime.Symbol(4, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 40:  // associationList ::= 
					{
						System.Collections.ArrayList RESULT = null;
						RESULT = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						CUP_parser_result = new java_cup.runtime.Symbol(7, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 39:  // associationList ::= PROPERTY COLON expression associationListRest 
					{
						System.Collections.ArrayList RESULT = null;
						int pleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left;
						int pright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).right;
						System.String p = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int asleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int asright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList as_Renamed = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						as_Renamed.Insert(0, new Association(p, e)); RESULT = as_Renamed;
						CUP_parser_result = new java_cup.runtime.Symbol(7, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 38:  // associationListRest ::= 
					{
						System.Collections.ArrayList RESULT = null;
						RESULT = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						CUP_parser_result = new java_cup.runtime.Symbol(6, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 37:  // associationListRest ::= COMMA PROPERTY COLON expression associationListRest 
					{
						System.Collections.ArrayList RESULT = null;
						int pleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left;
						int pright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).right;
						System.String p = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int asleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int asright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList as_Renamed = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						as_Renamed.Insert(0, new Association(p, e)); RESULT = as_Renamed;
						CUP_parser_result = new java_cup.runtime.Symbol(6, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 4]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 36:  // method ::= METHOD PROPERTY LPAREN identifierList RPAREN ARROW expression 
					{
						Association RESULT = null;
						int pleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).left;
						int pright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).right;
						System.String p = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).value_Renamed;
						int isleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left;
						int isright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).right;
						System.Collections.ArrayList is_Renamed = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						is_Renamed.Insert(0, "this");
						RESULT = new Association(p, new Fun(is_Renamed, e));
						CUP_parser_result = new java_cup.runtime.Symbol(12, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 6]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 35:  // methodList ::= 
					{
						System.Collections.ArrayList RESULT = null;
						RESULT = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						CUP_parser_result = new java_cup.runtime.Symbol(11, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 34:  // methodList ::= method methodList 
					{
						System.Collections.ArrayList RESULT = null;
						int mleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int mright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Association m = (Association) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						int msleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int msright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Collections.ArrayList ms = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						ms.Insert(0, m); RESULT = ms;
						CUP_parser_result = new java_cup.runtime.Symbol(11, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 33:  // expression ::= CLASS EXTENDS expression methodList END 
					{
						Expression RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int msleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int msright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.Collections.ArrayList ms = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						ms.Insert(0, new Association("Parent", e));
						RESULT = new Record(ms);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 4]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 32:  // expression ::= CLASS methodList END 
					{
						Expression RESULT = null;
						int msleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int msright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.Collections.ArrayList ms = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						RESULT = new Record(ms);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 31:  // expression ::= expression DOT PROPERTY LPAREN expressionList RPAREN 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).value_Renamed;
						int pleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left;
						int pright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).right;
						System.String p = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).value_Renamed;
						int argsleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int argsright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.Collections.ArrayList args = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						System.Collections.ArrayList lds = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						LetDefinition ld = new LetDefinition("obj", e1);
						lds.Insert(0, ld);
						args.Insert(0, new Variable("obj"));
						System.Collections.ArrayList lookupArgs = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						lookupArgs.Insert(0, new Variable("obj"));
						lookupArgs.Insert(1, new Property(p));
						Expression lookupResult = new Application(new Variable("lookup"), lookupArgs);
						Expression body = new Application(lookupResult, args);
						RESULT = new Let(lds, body);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 30:  // expression ::= expression ASSIGN expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						if (e1 is Variable)
						{
							RESULT = new Assignment(((Variable) e1).varname, e2);
						}
						else
						{
							if ((e1 is PrimitiveApplication) && ((PrimitiveApplication) e1).operator_Renamed.Equals("."))
							{
								RESULT = new PropertyAssignment(((PrimitiveApplication) e1).argument1, ((PrimitiveApplication) e1).argument2, e2);
							}
							else
								System.Console.Out.WriteLine("parse error before :=");
						}
						;
						
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 29:  // expression ::= WHILE expression DO expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new While(e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 28:  // expression ::= expression SEMICOLON expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new Sequence(e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 27:  // expression ::= LPAREN expression notEmptyExpressionList RPAREN 
					{
						Expression RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int esleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int esright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.Collections.ArrayList es = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						RESULT = new Application(e, es);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 26:  // expression ::= LPAREN expression RPAREN 
					{
						Expression RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						RESULT = e;
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 25:  // expression ::= RECFUN IDENTIFIER notEmptyIdentifierList ARROW expression 
					{
						Expression RESULT = null;
						int fleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left;
						int fright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).right;
						System.String f = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).value_Renamed;
						int xsleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int xsright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						System.Collections.ArrayList xs = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new RecFun(f, xs, e);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 4]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 24:  // expression ::= FUN notEmptyIdentifierList ARROW expression 
					{
						Expression RESULT = null;
						int xsleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int xsright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						System.Collections.ArrayList xs = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new Fun(xs, e);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 23:  // expression ::= LET notEmptyLetDefinitionList IN expression 
					{
						Expression RESULT = null;
						int ldsleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int ldsright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						System.Collections.ArrayList lds = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new Let(lds, e);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 3]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 22:  // expression ::= IF expression THEN expression ELSE expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 4]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 4]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 4]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e3left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e3right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e3 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new If(e1, e2, e3);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 5]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 21:  // expression ::= expression HASPROPERTY expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("hasproperty", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 20:  // expression ::= EMPTY expression 
					{
						Expression RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("empty", e);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 19:  // expression ::= expression DOT expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication(".", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 18:  // expression ::= expression PAIR expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						
						System.Collections.ArrayList as_Renamed = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(10));
						as_Renamed.Insert(0, new Association("Second", e2));
						as_Renamed.Insert(0, new Association("First", e1));
						RESULT = new Record(as_Renamed);
						
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 17:  // expression ::= LBRACKET associationList RBRACKET 
					{
						Expression RESULT = null;
						int asleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int asright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						System.Collections.ArrayList as_Renamed = (System.Collections.ArrayList) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						RESULT = new Record(as_Renamed);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 16:  // expression ::= expression EQUAL expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("=", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 15:  // expression ::= expression LESS expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("<", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 14:  // expression ::= expression GREATER expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication(">", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 13:  // expression ::= NEG expression 
					{
						Expression RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("\\", e);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 12:  // expression ::= expression OR expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("|", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 11:  // expression ::= expression AND expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("&", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 10:  // expression ::= UMINUS expression 
					{
						Expression RESULT = null;
						int eleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int eright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("~", e);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 9:  // expression ::= expression DIV expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("/", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 8:  // expression ::= expression TIMES expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("*", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 7:  // expression ::= expression MINUS expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("-", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 6:  // expression ::= expression PLUS expression 
					{
						Expression RESULT = null;
						int e1left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left;
						int e1right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).right;
						Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).value_Renamed;
						int e2left = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int e2right = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new PrimitiveApplication("+", e1, e2);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 2]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 5:  // expression ::= FALSE 
					{
						Expression RESULT = null;
						RESULT = new BoolConstant(false);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 4:  // expression ::= TRUE 
					{
						Expression RESULT = null;
						RESULT = new BoolConstant(true);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 3:  // expression ::= INTEGER 
					{
						Expression RESULT = null;
						int xleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int xright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.Int32 x = (System.Int32) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new IntConstant(x);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 2:  // expression ::= PROPERTY 
					{
						Expression RESULT = null;
						int pleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int pright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.String p = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new Property(p);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 1:  // $START ::= expression EOF 
					{
						System.Object RESULT = null;
						int start_valleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left;
						int start_valright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).right;
						Expression start_val = (Expression) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).value_Renamed;
						RESULT = start_val;
						CUP_parser_result = new java_cup.runtime.Symbol(0, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 1]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					/* ACCEPT */
					CUP_parser_parser.done_parsing();
					return CUP_parser_result;
					
					/*. . . . . . . . . . . . . . . . . . . .*/
				
				case 0:  // expression ::= IDENTIFIER 
					{
						Expression RESULT = null;
						int sleft = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left;
						int sright = ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right;
						System.String s = (System.String) ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).value_Renamed;
						RESULT = new Variable(s);
						CUP_parser_result = new java_cup.runtime.Symbol(1, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).left, ((java_cup.runtime.Symbol) CUP_parser_stack[CUP_parser_top - 0]).right, RESULT);
					}
					return CUP_parser_result;
					
					/* . . . . . .*/
				
				default: 
					throw new System.Exception("Invalid action number found in internal parse table");
				
			}
		}
	}
}