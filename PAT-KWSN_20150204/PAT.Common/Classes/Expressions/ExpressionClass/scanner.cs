/* The following code was generated by JFlex 1.2.2 on 10/28/03 3:41 PM */

/* JFlex example: part of Java 1.0/1.1 language lexer specification */
using System;
//UPGRADE_TODO: The package 'java_cup.runtime' could not be found. If it was not included in the conversion, there may be compiler issues. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1262'"
using java_cup.runtime;
namespace cs3212.oPL
{
	
	
	/// <summary> This class is a scanner generated by 
	/// <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
	/// on 10/28/03 3:41 PM from the specification file
	/// <tt>file:/misc/course/cs3212/java/cs3212/oPL/scanner.flex</tt>
	/// </summary>
	class scanner : java_cup.runtime.Scanner
	{
		
		/// <summary>this character denotes the end of file </summary>
		public const int YYEOF = - 1;
		
		/// <summary>lexical states </summary>
		public const int STRING = 0;
		public const int YYINITIAL = 0;
		
		/// <summary> Translates characters to character classes</summary>
		private const System.String yycmap_packed = "\x0009\x0007\x0001\x0003\x0001\x0002\x0001\x0000\x0001\x0003\x0001\x0001\x000E\x0007\x0004\x0000\x0001\x0003\x0003\x0000" + "\x0001\x0007\x0001\x0000\x0001\x0017\x0001\x0000\x0001\x0013\x0001\x0014\x0001\x0005\x0001\x0015\x0001\x0025\x0001\x0011" + "\x0001\x0026\x0001\x0004\x0001\x0009\x0009\x000A\x0001\x0024\x0001\x002D\x0001\x001B\x0001\x001A\x0001\x0012\x0002\x0000" + "\x001A\x0008\x0001\x0022\x0001\x0019\x0001\x0023\x0001\x0000\x0001\x0007\x0001\x0000\x0001\x0021\x0001\x0006\x0001\x0010" + "\x0001\x002C\x0001\x000F\x0001\x000B\x0001\x0006\x0001\x001E\x0001\x001C\x0002\x0006\x0001\x001F\x0001\x0027\x0001\x000D" + "\x0001\x002A\x0001\x0028\x0001\x0006\x0001\x000E\x0001\x0020\x0001\x001D\x0001\x000C\x0001\x0006\x0001\x002B\x0001\x002E" + "\x0001\x0029\x0001\x0006\x0001\x0000\x0001\x0018\x0001\x0000\x0001\x0016\x0021\x0007\x0002\x0000\x0004\x0007\x0004\x0000" + "\x0001\x0006\x000A\x0000\x0001\x0006\x0004\x0000\x0001\x0006\x0005\x0000\x0017\x0008\x0001\x0000\x0007\x0008\x0018\x0006" + "\x0001\x0000\x0008\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0002\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + 
			"\x0001\x0008\x0001\x0006\x0001\x0008\x0002\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0002\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0003\x0006\x0002\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0002\x0008\x0001\x0006\x0003\x0008\x0002\x0006\x0004\x0008\x0001\x0006\x0002\x0008\x0001\x0006\x0003\x0008\x0003\x0006" + "\x0002\x0008\x0001\x0006\x0002\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0002\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0007\x0001\x0006\x0001\x0008\x0001\x0006\x0002\x0008\x0001\x0006\x0003\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0002\x0008\x0002\x0006\x0001\x0007\x0001\x0008\x0001\x0006\x0006\x0007\x0001\x0008\x0001\x0007\x0001\x0006" + "\x0001\x0008\x0001\x0007\x0001\x0006\x0001\x0008\x0001\x0007\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0002\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0002\x0006" + "\x0001\x0008\x0001\x0007\x0001\x0006\x0001\x0008\x0001\x0006\x0004\x0000\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + 
			"\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0038\x0000\x0059\x0006\x0007\x0000\x0009\x0007" + "\x0002\x0000\x0007\x0007\x000E\x0000\x0002\x0007\x000E\x0000\x0005\x0007\x001B\x0000\x0046\x0007\x001A\x0000\x0002\x0007" + "\x0018\x0000\x0001\x0007\x000B\x0000\x0001\x0008\x0001\x0000\x0003\x0008\x0001\x0000\x0001\x0008\x0001\x0000\x0002\x0008" + "\x0001\x0006\x0011\x0008\x0001\x0000\x0009\x0008\x0023\x0006\x0001\x0000\x0002\x0006\x0003\x0008\x0002\x0006\x0003\x0000" + "\x0001\x0008\x0001\x0000\x0001\x0008\x0001\x0000\x0001\x0008\x0001\x0000\x0001\x0008\x0001\x0000\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0004\x0006\x0001\x0007\x000D\x0000\x000C\x0008\x0001\x0000\x0022\x0008\x0020\x0006\x0001\x0000\x000C\x0006" + "\x0001\x0000\x0002\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0000\x0004\x0007\x0009\x0000\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + 
			"\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0007\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0002\x0000\x0001\x0008\x0001\x0006\x0002\x0000\x0001\x0008\x0001\x0006\x0003\x0000\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0002\x0000\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0002\x0000\x0001\x0008\x0001\x0006\x0037\x0000" + "\x0026\x0008\x0002\x0000\x0001\x0007\x0007\x0000\x0027\x0006\x0009\x0000\x0011\x0007\x0001\x0000\x0017\x0007\x0001\x0000" + "\x0003\x0007\x0001\x0000\x0001\x0007\x0001\x0000\x0002\x0007\x0001\x0000\x0001\x0007\x000B\x0000\x001B\x0007\x0005\x0000" + "\x0003\x0007\x002E\x0000\x001A\x0007\x0005\x0000\x0013\x0007\x000D\x0000\x000A\x0007\x0006\x0000\x0048\x0007\x0002\x0000" + "\x0005\x0007\x0001\x0000\x000F\x0007\x0001\x0000\x0004\x0007\x0001\x0000\x0008\x0007\x0002\x0000\x000A\x0007\x0001\x0000" + "\x0004\x0007\x0002\x0000\x000A\x0007\u0207\x0000\x0003\x0007\x0001\x0000\x0035\x0007\x0002\x0000\x0012\x0007\x0003\x0000" + "\x0004\x0007\x0003\x0000\x000C\x0007\x0002\x0000\x000A\x0007\x0011\x0000\x0003\x0007\x0001\x0000\x0008\x0007\x0002\x0000" + "\x0002\x0007\x0002\x0000\x0016\x0007\x0001\x0000\x0007\x0007\x0001\x0000\x0001\x0007\x0003\x0000\x0004\x0007\x0002\x0000" + "\x0001\x0007\x0001\x0000\x0007\x0007\x0002\x0000\x0002\x0007\x0002\x0000\x0003\x0007\x0009\x0000\x0001\x0007\x0004\x0000" + "\x0002\x0007\x0001\x0000\x0005\x0007\x0002\x0000\x000E\x0007\x000E\x0000\x0001\x0007\x0002\x0000\x0006\x0007\x0004\x0000" + "\x0002\x0007\x0002\x0000\x0016\x0007\x0001\x0000\x0007\x0007\x0001\x0000\x0002\x0007\x0001\x0000\x0002\x0007\x0001\x0000" + 
			"\x0002\x0007\x0002\x0000\x0001\x0007\x0001\x0000\x0005\x0007\x0004\x0000\x0002\x0007\x0002\x0000\x0003\x0007\x000B\x0000" + "\x0004\x0007\x0001\x0000\x0001\x0007\x0007\x0000\x000F\x0007\x000C\x0000\x0003\x0007\x0001\x0000\x0007\x0007\x0001\x0000" + "\x0001\x0007\x0001\x0000\x0003\x0007\x0001\x0000\x0016\x0007\x0001\x0000\x0007\x0007\x0001\x0000\x0002\x0007\x0001\x0000" + "\x0005\x0007\x0002\x0000\x000A\x0007\x0001\x0000\x0003\x0007\x0001\x0000\x0003\x0007\x0012\x0000\x0001\x0007\x0005\x0000" + "\x000A\x0007\x0011\x0000\x0003\x0007\x0001\x0000\x0008\x0007\x0002\x0000\x0002\x0007\x0002\x0000\x0016\x0007\x0001\x0000" + "\x0007\x0007\x0001\x0000\x0002\x0007\x0002\x0000\x0004\x0007\x0002\x0000\x0008\x0007\x0003\x0000\x0002\x0007\x0002\x0000" + "\x0003\x0007\x0008\x0000\x0002\x0007\x0004\x0000\x0002\x0007\x0001\x0000\x0003\x0007\x0004\x0000\x000A\x0007\x0012\x0000" + "\x0002\x0007\x0001\x0000\x0006\x0007\x0003\x0000\x0003\x0007\x0001\x0000\x0004\x0007\x0003\x0000\x0002\x0007\x0001\x0000" + "\x0001\x0007\x0001\x0000\x0002\x0007\x0003\x0000\x0002\x0007\x0003\x0000\x0003\x0007\x0003\x0000\x0008\x0007\x0001\x0000" + "\x0003\x0007\x0004\x0000\x0005\x0007\x0003\x0000\x0003\x0007\x0001\x0000\x0004\x0007\x0009\x0000\x0001\x0007\x000F\x0000" + "\x0009\x0007\x0011\x0000\x0003\x0007\x0001\x0000\x0008\x0007\x0001\x0000\x0003\x0007\x0001\x0000\x0017\x0007\x0001\x0000" + "\x000A\x0007\x0001\x0000\x0005\x0007\x0004\x0000\x0007\x0007\x0001\x0000\x0003\x0007\x0001\x0000\x0004\x0007\x0007\x0000" + "\x0002\x0007\x0009\x0000\x0002\x0007\x0004\x0000\x000A\x0007\x0012\x0000\x0002\x0007\x0001\x0000\x0008\x0007\x0001\x0000" + "\x0003\x0007\x0001\x0000\x0017\x0007\x0001\x0000\x000A\x0007\x0001\x0000\x0005\x0007\x0004\x0000\x0007\x0007\x0001\x0000" + "\x0003\x0007\x0001\x0000\x0004\x0007\x0007\x0000\x0002\x0007\x0007\x0000\x0001\x0007\x0001\x0000\x0002\x0007\x0004\x0000" + "\x000A\x0007\x0012\x0000\x0002\x0007\x0001\x0000\x0008\x0007\x0001\x0000\x0003\x0007\x0001\x0000\x0017\x0007\x0001\x0000" + 
			"\x0010\x0007\x0004\x0000\x0006\x0007\x0002\x0000\x0003\x0007\x0001\x0000\x0004\x0007\x0009\x0000\x0001\x0007\x0008\x0000" + "\x0002\x0007\x0004\x0000\x000A\x0007\x0091\x0000\x002E\x0007\x0001\x0000\x000B\x0007\x0004\x0000\x0010\x0007\x0001\x0000" + "\x000A\x0007\x0027\x0000\x0002\x0007\x0001\x0000\x0001\x0007\x0002\x0000\x0002\x0007\x0001\x0000\x0001\x0007\x0002\x0000" + "\x0001\x0007\x0006\x0000\x0004\x0007\x0001\x0000\x0007\x0007\x0001\x0000\x0003\x0007\x0001\x0000\x0001\x0007\x0001\x0000" + "\x0001\x0007\x0002\x0000\x0002\x0007\x0001\x0000\x0002\x0007\x0001\x0000\x000A\x0007\x0001\x0000\x0003\x0007\x0002\x0000" + "\x0005\x0007\x0001\x0000\x0001\x0007\x0001\x0000\x0006\x0007\x0002\x0000\x000A\x0007\x0002\x0000\x0002\x0007\x003A\x0000" + "\x0002\x0007\x0006\x0000\x000A\x0007\x000B\x0000\x0001\x0007\x0001\x0000\x0001\x0007\x0001\x0000\x0001\x0007\x0004\x0000" + "\x000A\x0007\x0001\x0000\x0021\x0007\x0007\x0000\x0014\x0007\x0001\x0000\x0006\x0007\x0004\x0000\x0006\x0007\x0001\x0000" + "\x0001\x0007\x0001\x0000\x0015\x0007\x0003\x0000\x0007\x0007\x0001\x0000\x0001\x0007\x00E6\x0000\x0026\x0008\x000A\x0000" + "\x0027\x0006\x0009\x0000\x005A\x0007\x0005\x0000\x0044\x0007\x0005\x0000\x0052\x0007\u0c06\x0000\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + 
			"\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006" + "\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0007\x0006\x0004\x0000\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + 
			"\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008" + "\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0001\x0008\x0001\x0006\x0006\x0000" + "\x0008\x0006\x0008\x0008\x0006\x0006\x0002\x0000\x0006\x0008\x0002\x0000\x0008\x0006\x0008\x0008\x0008\x0006\x0008\x0008" + "\x0006\x0006\x0002\x0000\x0006\x0008\x0002\x0000\x0008\x0006\x0001\x0000\x0001\x0008\x0001\x0000\x0001\x0008\x0001\x0000" + "\x0001\x0008\x0001\x0000\x0001\x0008\x0008\x0006\x0008\x0008\x000E\x0006\x0002\x0000\x0008\x0006\x0008\x0008\x0008\x0006" + "\x0008\x0008\x0008\x0006\x0008\x0008\x0005\x0006\x0001\x0000\x0002\x0006\x0005\x0008\x0001\x0000\x0001\x0008\x0003\x0000" + "\x0003\x0006\x0001\x0000\x0002\x0006\x0005\x0008\x0003\x0000\x0004\x0006\x0002\x0000\x0002\x0006\x0004\x0008\x0004\x0000" + "\x0008\x0006\x0005\x0008\x0005\x0000\x0003\x0006\x0001\x0000\x0002\x0006\x0005\x0008\x000F\x0000\x0004\x0007\x001A\x0000" + "\x0005\x0007\x0010\x0000\x0002\x0007\x0029\x0000\x0006\x0007\x000F\x0000\x0001\x0006\x0020\x0000\x000D\x0007\x0023\x0000" + "\x000D\x0007\x0004\x0000\x0001\x0007\x0020\x0000\x0001\x0008\x0004\x0000\x0001\x0008\x0002\x0000\x0001\x0006\x0003\x0008" + "\x0002\x0006\x0003\x0008\x0001\x0006\x0001\x0000\x0001\x0008\x0002\x0000\x0006\x0008\x0006\x0000\x0001\x0008\x0001\x0000" + "\x0001\x0008\x0001\x0000\x0001\x0008\x0001\x0000\x0004\x0008\x0002\x0006\x0002\x0008\x0001\x0000\x0001\x0008\x0001\x0006" + "\x0004\x0007\x0027\x0000\x0023\x0007\u0e82\x0000\x0001\x0007\x0001\x0000\x0001\x0007\x0019\x0000\x000F\x0007\x0001\x0000" + "\x0005\x0007\x000B\x0000\x0054\x0007\x0004\x0000\x0006\x0007\x0002\x0000\x005A\x0007\x0001\x0000\x0003\x0007\x0006\x0000" + "\x0028\x0007\x0004\x0000\x005E\x0007\u1c71\x0000\u51a6\x0007\u0c5a\x0000\u2ba4\x0007\u215c\x0000\u012e\x0007\x00D2\x0000" + "\x0007\x0006\x000C\x0000\x0005\x0006\x0006\x0000\x000B\x0007\x0001\x0000\x000D\x0007\x0001\x0000\x0005\x0007\x0001\x0000" + 
			"\x0001\x0007\x0001\x0000\x0002\x0007\x0001\x0000\x0002\x0007\x0001\x0000\x006C\x0007\x0021\x0000\u016b\x0007\x0012\x0000" + "\x0040\x0007\x0002\x0000\x0036\x0007\x0028\x0000\x000C\x0007\x0024\x0000\x0004\x0007\x000F\x0000\x0002\x0007\x0018\x0000" + "\x0003\x0007\x0019\x0000\x0001\x0007\x0006\x0000\x0003\x0007\x0001\x0000\x0001\x0007\x0001\x0000\x0087\x0007\x0002\x0000" + "\x0001\x0007\x0004\x0000\x0001\x0007\x000B\x0000\x000A\x0007\x0007\x0000\x001A\x0008\x0004\x0000\x0001\x0007\x0001\x0000" + "\x001A\x0006\x000B\x0000\x0059\x0007\x0003\x0000\x0006\x0007\x0002\x0000\x0006\x0007\x0002\x0000\x0006\x0007\x0002\x0000" + "\x0003\x0007\x0003\x0000\x0002\x0007\x0003\x0000\x0002\x0007\x0019\x0000";
		
		/// <summary> Translates characters to character classes</summary>
		//UPGRADE_NOTE: Final was removed from the declaration of 'yycmap '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private static readonly char[] yycmap = yy_unpack_cmap(yycmap_packed);
		
		/// <summary> Translates a state to a row index in the transition table</summary>
		//UPGRADE_NOTE: Final was removed from the declaration of 'yy_rowMap'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private static readonly int[] yy_rowMap = new int[]{0, 47, 94, 47, 141, 47, 188, 235, 47, 282, 329, 376, 423, 470, 517, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 564, 611, 658, 705, 47, 47, 752, 47, 47, 799, 846, 893, 47, 940, 987, 1034, 1081, 1128, 1175, 1222, 1269, 1316, 1363, 47, 188, 188, 1410, 1457, 1504, 1551, 47, 47, 1598, 1645, 188, 1692, 188, 1739, 1786, 188, 1833, 1880, 1927, 1974, 2021, 2068, 2115, 188, 2162, 2209, 2256, 2303, 2350, 188, 2397, 2444, 2491, 188, 188, 2538, 2585, 2632, 188, 2679, 188, 2726, 188, 2773, 2820, 188, 188, 2867, 2914, 188, 188, 2961, 3008, 3055, 3102, 188};
		
		/// <summary> The packed transition table of the DFA</summary>
		private const System.String yy_packed = "\x0001\x0002\x0001\x0003\x0002\x0004\x0001\x0005\x0001\x0006\x0001\x0007\x0001\x0002\x0001\x0008" + "\x0001\x0009\x0001\x000A\x0001\x000B\x0002\x0007\x0001\x000C\x0001\x000D\x0001\x000E\x0001\x000F" + "\x0001\x0010\x0001\x0011\x0001\x0012\x0001\x0013\x0001\x0014\x0001\x0015\x0001\x0016\x0001\x0017" + "\x0001\x0018\x0001\x0019\x0001\x001A\x0001\x001B\x0001\x001C\x0001\x001D\x0002\x0007\x0001\x001E" + "\x0001\x001F\x0001\x0020\x0001\x0021\x0001\x0022\x0001\x0023\x0003\x0007\x0001\x0024\x0001\x0025" + "\x0001\x0026\x0001\x0007\x0031\x0000\x0001\x0004\x0030\x0000\x0001\x0027\x0001\x0028\x002F\x0000" + "\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000" + "\x000B\x0008\x000B\x0000\x0006\x0008\x0005\x0000\x0006\x0008\x0001\x0000\x0001\x0008\x0009\x0000" + "\x0002\x000A\x002A\x0000\x0006\x0007\x0001\x0029\x0004\x0007\x000B\x0000\x0005\x0007\x0001\x002A" + "\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0009\x0007\x0001\x002B\x0001\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0007\x0007" + "\x0001\x002C\x0003\x0007\x000B\x0000\x0003\x0007\x0001\x002D\x0002\x0007\x0005\x0000\x0001\x002E" + "\x0005\x0007\x0001\x0000\x0001\x002F\x0006\x0000\x000B\x0007\x000B\x0000\x0003\x0007\x0001\x0030" + "\x0002\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0012\x0000\x0001\x0031\x0022\x0000" + "\x0005\x0007\x0001\x0032\x0001\x0007\x0001\x0033\x0003\x0007\x000B\x0000\x0006\x0007\x0005\x0000" + "\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0008\x0007\x0001\x0034\x0002\x0007\x000B\x0000" + "\x0002\x0007\x0001\x0035\x0003\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000" + "\x000B\x0007\x000B\x0000\x0005\x0007\x0001\x0036\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0009\x0007\x0001\x0037\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + 
			"\x0001\x0000\x0001\x0007\x001A\x0000\x0001\x0038\x0009\x0000\x0001\x0039\x0010\x0000\x0009\x0007" + "\x0001\x003A\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x000B\x0007\x000B\x0000\x0002\x0007\x0001\x003B\x0003\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0003\x0007" + "\x0001\x003C\x0002\x0007\x0001\x0000\x0001\x0007\x0001\x0027\x0001\x0003\x0001\x0004\x002C\x0027" + "\x002F\x003D\x0006\x0000\x0007\x0007\x0001\x003E\x0003\x0007\x000B\x0000\x0006\x0007\x0005\x0000" + "\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0003\x0007\x0001\x003F" + "\x0002\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000A\x0007\x0001\x0040" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0005\x0007\x0001\x0041\x0001\x0000\x0001\x0007\x0006\x0000" + "\x000B\x0007\x000B\x0000\x0004\x0007\x0001\x0042\x0001\x0007\x0005\x0000\x0006\x0007\x0001\x0000" + "\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0001\x0007\x0001\x0043" + "\x0004\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0001\x0007\x0001\x0044" + "\x0004\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000" + "\x0005\x0007\x0001\x0045\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0006\x0007" + "\x0001\x0046\x0004\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0009\x0007\x0001\x0047\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0004\x0007\x0001\x0048\x0001\x0007" + "\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0001\x0007" + "\x0001\x0049\x0004\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + 
			"\x000B\x0000\x0001\x0007\x0001\x004A\x0004\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x000B\x0007\x000B\x0000\x0001\x004B\x0005\x0007\x0005\x0000\x0006\x0007\x0001\x0000" + "\x0001\x0007\x0005\x003D\x0001\x004C\x0029\x003D\x0006\x0000\x000B\x0007\x000B\x0000\x0004\x0007" + "\x0001\x004D\x0001\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0005\x0007" + "\x0001\x004E\x0005\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0009\x0007\x0001\x004F\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0001\x0007\x0001\x0050\x0004\x0007" + "\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0009\x0007\x0001\x0051\x0001\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + "\x000B\x0000\x0004\x0007\x0001\x0052\x0001\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0009\x0007\x0001\x0053\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x0007\x0007\x0001\x0054\x0003\x0007\x000B\x0000\x0006\x0007" + "\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007" + "\x0005\x0000\x0001\x0007\x0001\x0055\x0004\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + "\x000B\x0000\x0002\x0007\x0001\x0056\x0003\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x000B\x0007\x000B\x0000\x0003\x0007\x0001\x0057\x0002\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0004\x003D\x0001\x0004\x0001\x004C\x0029\x003D\x0006\x0000\x0009\x0007" + "\x0001\x0058\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0006\x0007\x0001\x0059\x0004\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0002\x0007" + 
			"\x0001\x005A\x0003\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0007\x0007\x0001\x005B\x0003\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + "\x000B\x0000\x0004\x0007\x0001\x005C\x0001\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0008\x0007\x0001\x005D\x0002\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0003\x0007" + "\x0001\x005E\x0002\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0009\x0007\x0001\x005F\x0001\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x0007\x0007" + "\x0001\x0060\x0003\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0005\x0007\x0001\x0061\x0001\x0000" + "\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0003\x0007\x0001\x0062" + "\x0002\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0006\x0007\x0005\x0000" + "\x0005\x0007\x0001\x0063\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0004\x0007" + "\x0001\x0064\x0001\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0001\x0007\x0001\x0065\x0004\x0007\x0001\x0000\x0001\x0007" + "\x0006\x0000\x0009\x0007\x0001\x0066\x0001\x0007\x000B\x0000\x0006\x0007\x0005\x0000\x0006\x0007" + "\x0001\x0000\x0001\x0007\x0006\x0000\x0008\x0007\x0001\x0067\x0002\x0007\x000B\x0000\x0006\x0007" + "\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007\x000B\x0000\x0001\x0007" + "\x0001\x0068\x0004\x0007\x0005\x0000\x0006\x0007\x0001\x0000\x0001\x0007\x0006\x0000\x000B\x0007" + "\x000B\x0000\x0006\x0007\x0005\x0000\x0002\x0007\x0001\x0069\x0003\x0007\x0001\x0000\x0001\x0007";
		
		/// <summary> The transition table of the DFA</summary>
		//UPGRADE_NOTE: Final was removed from the declaration of 'yytrans '. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private static readonly int[] yytrans = yy_unpack(yy_packed);
		
		
		/* error codes */
		private const int YY_UNKNOWN_ERROR = 0;
		private const int YY_ILLEGAL_STATE = 1;
		private const int YY_NO_MATCH = 2;
		private const int YY_PUSHBACK_2BIG = 3;
		
		/* error messages for the codes above */
		//UPGRADE_NOTE: Final was removed from the declaration of 'YY_ERROR_MSG'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private static readonly System.String[] YY_ERROR_MSG = new System.String[]{"Unkown internal scanner error", "Internal error: unknown state", "Error: could not match input", "Error: pushback value was too large"};
		
		/// <summary> YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code></summary>
		//UPGRADE_NOTE: Final was removed from the declaration of 'YY_ATTRIBUTE'. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
		private static readonly sbyte[] YY_ATTRIBUTE = new sbyte[]{0, 9, 1, 9, 1, 9, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 1, 9, 9, 1, 1, 1, 9, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
		
		/// <summary>the input device </summary>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		private System.IO.StreamReader yy_reader;
		
		/// <summary>the current state of the DFA </summary>
		private int yy_state;
		
		/// <summary>the current lexical state </summary>
		private int yy_lexical_state = YYINITIAL;
		
		/// <summary>this buffer contains the current text to be matched and is
		/// the source of the yytext() string 
		/// </summary>
		private char[] yy_buffer = new char[16384];
		
		/// <summary>the textposition at the last accepting state </summary>
		private int yy_markedPos;
		
		/// <summary>the textposition at the last state to be included in yytext </summary>
		private int yy_pushbackPos;
		
		/// <summary>the current text position in the buffer </summary>
		private int yy_currentPos;
		
		/// <summary>startRead marks the beginning of the yytext() string in the buffer </summary>
		private int yy_startRead;
		
		/// <summary>endRead marks the last character in the buffer, that has been read
		/// from input 
		/// </summary>
		private int yy_endRead;
		
		/// <summary>number of newlines encountered up to the start of the matched text </summary>
		private int yyline;
		
		/// <summary>the number of characters up to the start of the matched text </summary>
		private int yychar;
		
		/// <summary> the number of characters from the last newline up to the start of the 
		/// matched text
		/// </summary>
		private int yycolumn;
		
		/// <summary> yy_atBOL == true <=> the scanner is currently at the beginning of a line</summary>
		private bool yy_atBOL;
		
		/// <summary>yy_atEOF == true <=> the scanner has returned a value for EOF </summary>
		private bool yy_atEOF;
		
		/// <summary>denotes if the user-EOF-code has already been executed </summary>
		private bool yy_eof_done;
		
		/* user code: */
		internal System.Text.StringBuilder string_Renamed = new System.Text.StringBuilder();
		
		private Symbol symbol(int type)
		{
			return new Symbol(type, yyline, yycolumn);
		}
		private Symbol symbol(int type, System.Object value_Renamed)
		{
			return new Symbol(type, yyline, yycolumn, value_Renamed);
		}
		
		
		
		/// <summary> Creates a new scanner
		/// There is also a java.io.InputStream version of this constructor.
		/// 
		/// </summary>
		/// <param name="in"> the java.io.Reader to read input from.
		/// </param>
		//UPGRADE_ISSUE: Class hierarchy differences between 'java.io.Reader' and 'System.IO.StreamReader' may cause compilation errors. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1186'"
		internal scanner(System.IO.StreamReader in_Renamed)
		{
			this.yy_reader = in_Renamed;
		}
		
		/// <summary> Creates a new scanner.
		/// There is also java.io.Reader version of this constructor.
		/// 
		/// </summary>
		/// <param name="in"> the java.io.Inputstream to read input from.
		/// </param>
		internal scanner(System.IO.Stream in_Renamed):this(new System.IO.StreamReader(in_Renamed, System.Text.Encoding.Default))
		{
		}
		
		/// <summary> Unpacks the compressed DFA transition table.
		/// 
		/// </summary>
		/// <param name="packed">  the packed transition table
		/// </param>
		/// <returns>         the unpacked transition table
		/// </returns>
		private static int[] yy_unpack(System.String packed)
		{
			int[] trans = new int[3149];
			int i = 0; /* index in packed string  */
			int j = 0; /* index in unpacked array */
			while (i < 1248)
			{
				int count = packed[i++];
				int value_Renamed = packed[i++];
				value_Renamed--;
				do 
					trans[j++] = value_Renamed;
				while (--count > 0);
			}
			return trans;
		}
		
		/// <summary> Unpacks the compressed character translation table.
		/// 
		/// </summary>
		/// <param name="packed">  the packed character translation table
		/// </param>
		/// <returns>         the unpacked character translation table
		/// </returns>
		private static char[] yy_unpack_cmap(System.String packed)
		{
			char[] map = new char[0x10000];
			int i = 0; /* index in packed string  */
			int j = 0; /* index in unpacked array */
			while (i < 2652)
			{
				int count = packed[i++];
				char value_Renamed = packed[i++];
				do 
					map[j++] = value_Renamed;
				while (--count > 0);
			}
			return map;
		}
		
		
		/// <summary> Gets the next input character.
		/// 
		/// </summary>
		/// <returns>      the next character of the input stream, EOF if the
		/// end of the stream is reached.
		/// </returns>
		/// <exception cref="IOException"> if any I/O-Error occurs
		/// </exception>
		private int yy_advance()
		{
			
			/* standard case */
			if (yy_currentPos < yy_endRead)
				return yy_buffer[yy_currentPos++];
			
			/* if the eof is reached, we don't need to work hard */
			if (yy_atEOF)
				return YYEOF;
			
			/* otherwise: need to refill the buffer */
			
			/* first: make room (if you can) */
			if (yy_startRead > 0)
			{
				Array.Copy(yy_buffer, yy_startRead, yy_buffer, 0, yy_endRead - yy_startRead);
				
				/* translate stored positions */
				yy_endRead -= yy_startRead;
				yy_currentPos -= yy_startRead;
				yy_markedPos -= yy_startRead;
				yy_pushbackPos -= yy_startRead;
				yy_startRead = 0;
			}
			
			/* is the buffer big enough? */
			if (yy_currentPos >= yy_buffer.Length)
			{
				/* if not: blow it up */
				char[] newBuffer = new char[yy_currentPos * 2];
				Array.Copy(yy_buffer, 0, newBuffer, 0, yy_buffer.Length);
				yy_buffer = newBuffer;
			}
			
			/* finally: fill the buffer with new input */
			//UPGRADE_TODO: Method 'java.io.Reader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javaioReaderread_char[]_int_int'"
			int numRead = yy_reader.Read(yy_buffer, yy_endRead, yy_buffer.Length - yy_endRead);
			
			if (numRead == - 1)
				return YYEOF;
			
			yy_endRead += numRead;
			
			return yy_buffer[yy_currentPos++];
		}
		
		
		/// <summary> Closes the input stream.</summary>
		public void  yyclose()
		{
			yy_atEOF = true; /* indicate end of file */
			yy_endRead = yy_startRead; /* invalidate buffer    */
			yy_reader.Close();
		}
		
		
		/// <summary> Returns the current lexical state.</summary>
		public int yystate()
		{
			return yy_lexical_state;
		}
		
		/// <summary> Enters a new lexical state
		/// 
		/// </summary>
		/// <param name="newState">the new lexical state
		/// </param>
		public void  yybegin(int newState)
		{
			yy_lexical_state = newState;
		}
		
		
		/// <summary> Returns the text matched by the current regular expression.</summary>
		public System.String yytext()
		{
			return new System.String(yy_buffer, yy_startRead, yy_markedPos - yy_startRead);
		}
		
		/// <summary> Returns the length of the matched text region.</summary>
		public int yylength()
		{
			return yy_markedPos - yy_startRead;
		}
		
		
		/// <summary> Reports an error that occured while scanning.
		/// 
		/// </summary>
		/// <param name="errorCode"> the code of the errormessage to display
		/// </param>
		private void  yy_ScanError(int errorCode)
		{
			try
			{
				System.Console.Out.WriteLine(YY_ERROR_MSG[errorCode]);
			}
			catch (System.IndexOutOfRangeException e)
			{
				System.Console.Out.WriteLine(YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
			}
			
			System.Environment.Exit(1);
		}
		
		
		/// <summary> Pushes the specified amount of characters back into the input stream.
		/// 
		/// They will be read again by then next call of the scanning method
		/// 
		/// </summary>
		/// <param name="number"> the number of characters to be read again.
		/// This number must not be greater than yylength()!
		/// </param>
		private void  yypushback(int number)
		{
			if (number > yylength())
				yy_ScanError(YY_PUSHBACK_2BIG);
			
			yy_markedPos -= number;
		}
		
		
		/// <summary> Contains user EOF-code, which will be executed exactly once,
		/// when the end of file is reached
		/// </summary>
		private void  yy_do_eof()
		{
			if (!yy_eof_done)
			{
				yy_eof_done = true;
				yyclose();
			}
		}
		
		
		/// <summary> Resumes scanning until the next regular expression is matched,
		/// the end of input is encountered or an I/O-Error occurs.
		/// 
		/// </summary>
		/// <returns>      the next token
		/// </returns>
		/// <exception cref="IOException"> if any I/O-Error occurs
		/// </exception>
		public virtual java_cup.runtime.Symbol next_token()
		{
			int yy_input;
			int yy_action;
			
			
			while (true)
			{
				
				bool yy_counted = false;
				for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos; yy_currentPos++)
				{
					switch (yy_buffer[yy_currentPos])
					{
						
						case '\r': 
							yyline++;
							yycolumn = 0;
							yy_counted = true;
							break;
						
						case '\n': 
							if (yy_counted)
								yy_counted = false;
							else
							{
								yyline++;
								yycolumn = 0;
							}
							break;
						
						default: 
							yy_counted = false;
							yycolumn++;
							break;
						
					}
				}
				
				if (yy_counted)
				{
					if (yy_advance() == '\n')
						yyline--;
					if (!yy_atEOF)
						yy_currentPos--;
				}
				
				yy_action = - 1;
				
				yy_currentPos = yy_startRead = yy_markedPos;
				
				yy_state = yy_lexical_state;
				
				
				{
					while (true)
					{
						
						yy_input = yy_advance();
						
						if (yy_input == YYEOF)
						{
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto yy_forAction_brk;
						}
						
						int yy_next = yytrans[yy_rowMap[yy_state] + yycmap[yy_input]];
						if (yy_next == - 1)
						{
							//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
							goto yy_forAction_brk;
						}
						yy_state = yy_next;
						
						int yy_attributes = YY_ATTRIBUTE[yy_state];
						if ((yy_attributes & 1) > 0)
						{
							yy_action = yy_state;
							yy_markedPos = yy_currentPos;
							if ((yy_attributes & 8) > 0)
							{
								//UPGRADE_NOTE: Labeled break statement was changed to a goto statement. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
								goto yy_forAction_brk;
							}
						}
					}
				}
				//UPGRADE_NOTE: Label 'yy_forAction_brk' was added. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"
yy_forAction_brk: ;
				
				
				
				switch (yy_action)
				{
					
					
					case 104: 
					{
						return symbol(sym.HASPROPERTY);
					}
					
					case 106:  break;
					
					case 99: 
					{
						return symbol(sym.EXTENDS);
					}
					
					case 107:  break;
					
					case 98: 
					{
						return symbol(sym.METHOD);
					}
					
					case 108:  break;
					
					case 95: 
					{
						return symbol(sym.RECFUN);
					}
					
					case 109:  break;
					
					case 94: 
					{
						return symbol(sym.WHILE);
					}
					
					case 110:  break;
					
					case 91: 
					{
						return symbol(sym.CLASS);
					}
					
					case 111:  break;
					
					case 89: 
					{
						return symbol(sym.EMPTY);
					}
					
					case 112:  break;
					
					case 87: 
					{
						return symbol(sym.FALSE);
					}
					
					case 113:  break;
					
					case 83: 
					{
						return symbol(sym.THEN);
					}
					
					case 114:  break;
					
					case 82: 
					{
						return symbol(sym.TRUE);
					}
					
					case 115:  break;
					
					case 78: 
					{
						return symbol(sym.ELSE);
					}
					
					case 116:  break;
					
					case 72: 
					{
						return symbol(sym.LET);
					}
					
					case 117:  break;
					
					case 64: 
					{
						return symbol(sym.END);
					}
					
					case 118:  break;
					
					case 61: 
					{
						return symbol(sym.FUN);
					}
					
					case 119:  break;
					
					case 59: 
					{
						return symbol(sym.DO);
					}
					
					case 120:  break;
					
					case 56: 
					{
						return symbol(sym.PAIR);
					}
					
					case 121:  break;
					
					case 55: 
					{
						return symbol(sym.ASSIGN);
					}
					
					case 122:  break;
					
					case 50: 
					{
						return symbol(sym.IN);
					}
					
					case 123:  break;
					
					case 49: 
					{
						return symbol(sym.IF);
					}
					
					case 124:  break;
					
					case 48: 
					{
						return symbol(sym.ARROW);
					}
					
					case 125:  break;
					
					case 37: 
					{
						return symbol(sym.SEMICOLON);
					}
					
					case 126:  break;
					
					case 33: 
					{
						return symbol(sym.DOT);
					}
					
					case 127:  break;
					
					case 32: 
					{
						return symbol(sym.COMMA);
					}
					
					case 128:  break;
					
					case 31: 
					{
						return symbol(sym.COLON);
					}
					
					case 129:  break;
					
					case 30: 
					{
						return symbol(sym.RBRACKET);
					}
					
					case 130:  break;
					
					case 29: 
					{
						return symbol(sym.LBRACKET);
					}
					
					case 131:  break;
					
					case 24: 
					{
						return symbol(sym.LESS);
					}
					
					case 132:  break;
					
					case 23: 
					{
						return symbol(sym.EQUAL);
					}
					
					case 133:  break;
					
					case 22: 
					{
						return symbol(sym.NEG);
					}
					
					case 134:  break;
					
					case 21: 
					{
						return symbol(sym.OR);
					}
					
					case 135:  break;
					
					case 20: 
					{
						return symbol(sym.AND);
					}
					
					case 136:  break;
					
					case 19: 
					{
						return symbol(sym.UMINUS);
					}
					
					case 137:  break;
					
					case 18: 
					{
						return symbol(sym.PLUS);
					}
					
					case 138:  break;
					
					case 17: 
					{
						return symbol(sym.RPAREN);
					}
					
					case 139:  break;
					
					case 16: 
					{
						return symbol(sym.LPAREN);
					}
					
					case 140:  break;
					
					case 15: 
					{
						return symbol(sym.GREATER);
					}
					
					case 141:  break;
					
					case 14: 
					{
						return symbol(sym.MINUS);
					}
					
					case 142:  break;
					
					case 8: 
					case 9: 
					{
						int x = 0;
						try
						{
							x = System.Int32.Parse(yytext());
						}
						catch (System.FormatException nfe)
						{
							System.Console.Out.WriteLine("wrong int format; " + "internal error in scanner");
						}
						return symbol(sym.INTEGER, (System.Int32) x);
					}
					
					case 143:  break;
					
					case 7: 
					{
						return symbol(sym.PROPERTY, yytext());
					}
					
					case 144:  break;
					
					case 6: 
					case 10: 
					case 11: 
					case 12: 
					case 13: 
					case 25: 
					case 26: 
					case 27: 
					case 28: 
					case 34: 
					case 35: 
					case 36: 
					case 40: 
					case 41: 
					case 42: 
					case 43: 
					case 44: 
					case 45: 
					case 46: 
					case 47: 
					case 51: 
					case 52: 
					case 53: 
					case 54: 
					case 57: 
					case 58: 
					case 62: 
					case 63: 
					case 65: 
					case 66: 
					case 67: 
					case 68: 
					case 69: 
					case 70: 
					case 71: 
					case 73: 
					case 74: 
					case 76: 
					case 77: 
					case 79: 
					case 80: 
					case 81: 
					case 84: 
					case 85: 
					case 86: 
					case 88: 
					case 90: 
					case 92: 
					case 93: 
					case 96: 
					case 97: 
					case 100: 
					case 101: 
					case 102: 
					case 103: 
					{
						return symbol(sym.IDENTIFIER, yytext());
					}
					
					case 145:  break;
					
					case 5: 
					{
						return symbol(sym.TIMES);
					}
					
					case 146:  break;
					
					case 4: 
					{
						return symbol(sym.DIV);
					}
					
					case 147:  break;
					
					case 2: 
					case 3: 
						{
							/* ignore */
						}
						goto case 148;
					
					case 148:  break;
					
					case 1: 
					{
						throw new System.ApplicationException("Illegal character <" + yytext() + ">");
					}
					
					case 149:  break;
					
					default: 
						if (yy_input == YYEOF && yy_startRead == yy_currentPos)
						{
							yy_atEOF = true;
							yy_do_eof();
							{
								return new java_cup.runtime.Symbol(sym.EOF);
							}
						}
						else
						{
							yy_ScanError(YY_NO_MATCH);
						}
						break;
					
				}
			}
		}
	}
}